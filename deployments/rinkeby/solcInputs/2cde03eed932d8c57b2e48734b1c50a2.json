{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity <=0.8.8;\n\nimport \"./PriceConvertor.sol\";\n\ncontract FundMe {\n\n    using PriceConvertor for uint256;\n\n    uint256 public constant minUsd = 5 * 1e18;\n    address[] public funders;\n    mapping(address => uint256) public addressToAmountFunded;\n\n    AggregatorV3Interface public priceFeed;\n\n    address public immutable i_owner;\n    constructor(address priceFeedAddress){\n        i_owner = msg.sender; \n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable{\n        // set minimum fund amount in USD\n        require(msg.value.getConversionRate(priceFeed) >= minUsd, \"Didn't send enough\");\n        // 1e18 = 1*10 ** 18 == value of wei for 1 eth\n        // msg.value will have 18 decimal places\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] += msg.value; // in wei\n    }\n\n    function withdraw() public onlyOwner {\n        \n        for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++)\n        {\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        funders = new address[](0); //reset the array\n\n        // actually withdraw the funds\n        // msg.sender = address\n        // payable(msg.sender) = payable address\n        // call\n        (bool callSuccess, /* bytes memory dataReturned */) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess, \"call failed\");\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == i_owner, \"Sender is not owner\");\n        _;\n    }\n\n    // what happens if someone sends this contract eth without calling fund\n    // receive\n    // fallback\n\n    receive() external payable {\n        fund();\n    }\n\n    fallback() external payable {\n        fund();\n    }\n}"
    },
    "contracts/PriceConvertor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity <=0.8.8;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConvertor {\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint256) {\n        (,int256 price,,,) = priceFeed.latestRoundData();\n        uint256 ethPrice = uint256(price * 1e10); // price of 1 eth\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}